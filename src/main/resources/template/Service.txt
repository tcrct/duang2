package ${basePackage}.service.${entityVarName};

import com.duangframework.db.IdEntity;
import com.duangframework.db.common.Query;
import com.duangframework.db.common.Update;
import com.duangframework.db.mongodb.common.MongoDao;
import com.duangframework.exception.ServiceException;
import com.duangframework.kit.ToolsKit;
import com.duangframework.mvc.annotation.Import;
import com.duangframework.mvc.annotation.Service;
import com.duangframework.utils.DuangId;
import com.duangframework.vtor.annotation.VtorKit;
import com.duangframework.mvc.dto.SearchListDto;
import com.duangframework.mvc.dto.PageDto;
import com.duangframework.generate.curd.CurdService;
import ${basePackage}.cache.${entityVarName}.${entityName}CacheService;
import ${entityClassName};

/**
 *  ${entityName} 业务层
 *
 * @author duang
 * @since 1.0
 * @Date ${currentTime}
 */
@Service
public class ${entityName}Service extends CurdService<${entityName}> {

    @Import
    private ${entityName}CacheService ${entityVarName}CacheService;
    @Import
    private MongoDao<${entityName}> ${entityVarName}Dao;

    /**
     * 保存${entityName}对象
     * @param ${entityVarName}  ${entityName}对象
     * @since 1.0
     * @return  保存成功返回${entityName}对象， 否则抛出异常
     */
    public ${entityName} save(${entityName} ${entityVarName}) {
        try {
            return super.save(${entityVarName}, ${entityVarName}Dao, ${entityVarName}CacheService);
        } catch (Exception e) {
            throw new ServiceException("save ${entityName} is fail: " + e.getMessage(), e);
        }
    }

    /**
     * 根据id查找${entityName}对象记录
     * @param id    ${entityName}对象id字段值
     * @since 1.0
     * @return 查找成功返回${entityName}对象, 否则抛出异常
     */
    public ${entityName} findById(String id) {
        try {
            return super.findById(id, ${entityVarName}Dao, ${entityVarName}CacheService);
        } catch (Exception e) {
            throw new ServiceException("findById for ${entityName} is fail: "+ e.getMessage(), e);
        }
    }

    /**
     *  根据ID删除${entityName}对象记录
     * @param id    ${entityName}对象id字段值
     * @since 1.0
     * @return  删除成功返回true, 否则抛出异常
     */
    public boolean deleteById(String id) {
        try {
           return super.deleteById(id, ${entityVarName}Dao, ${entityVarName}CacheService);
        } catch (Exception e) {
            throw new ServiceException("deleteById for ${entityName} is fail: "+ e.getMessage(), e);
        }
    }

     /**
     * 根据搜索对象搜索符合条件的User对象记录
     * @param searchListDto     搜索对象
     * @return
     */
    public PageDto<${entityName}> search(SearchListDto searchListDto) {
        try {
            return super.search(searchListDto, ${entityVarName}Dao, ${entityVarName}CacheService);
        } catch (Exception e) {
            e.printStackTrace();
            throw new ServiceException("search for ${entityName} is fail: "+ e.getMessage(), e);
        }
    }

}
